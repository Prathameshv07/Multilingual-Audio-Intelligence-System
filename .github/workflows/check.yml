name: Check file size and sync to Google Drive
on
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-file-size:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Check large files
        uses: ActionsDesk/lfs-warning@v2.0
        with:
          filesizelimit: 1073741824  # 1GB

  sync-to-drive-on-pr:
    runs-on: ubuntu-latest
    needs: check-file-size
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      # Pull LFS files
      - name: Pull LFS files
        run: |
          git lfs install
          git lfs pull

      # Install pandoc for MD to PDF conversion
      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-latex-extra

      # Convert MD files to PDF
      - name: Convert MD to PDF
        run: |
          mkdir -p pdf_output
          find . -name "*.md" -not -path "./.git/*" -not -path "./pdf_output/*" | while read file; do
            relative_path="${file#./}"
            pdf_path="pdf_output/${relative_path%.md}.pdf"
            mkdir -p "$(dirname "$pdf_path")"
            pandoc "$file" -o "$pdf_path" --pdf-engine=pdflatex
            echo "Converted $file to $pdf_path"
          done

      # Set up Python for Google Drive upload
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      # Create and run upload script
      - name: Upload to Google Drive (PR Preview)
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          cat > upload_to_drive.py << 'EOF'
          import os
          import json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          import mimetypes

          credentials_json = os.environ['GOOGLE_CREDENTIALS']
          credentials_info = json.loads(credentials_json)
          credentials = service_account.Credentials.from_service_account_info(credentials_info)

          service = build('drive', 'v3', credentials=credentials)
          FOLDER_ID = '1-8HJcWxsUUQIj9OMXQeoeULS06RA9Hg9'

          def get_mime_type(file_path):
              mime_type, _ = mimetypes.guess_type(file_path)
              return mime_type or 'application/octet-stream'

          def upload_file(file_path, parent_folder_id, drive_service):
              file_name = f"PR_PREVIEW_{os.path.basename(file_path)}"
              
              query = f"name='{file_name}' and '{parent_folder_id}' in parents and trashed=false"
              results = drive_service.files().list(q=query).execute()
              items = results.get('files', [])
              
              media = MediaFileUpload(file_path, mimetype=get_mime_type(file_path), resumable=True)
              
              if items:
                  file_id = items[0]['id']
                  updated_file = drive_service.files().update(
                      fileId=file_id,
                      media_body=media
                  ).execute()
                  print(f'Updated PR Preview: {file_name}')
              else:
                  file_metadata = {
                      'name': file_name,
                      'parents': [parent_folder_id]
                  }
                  file = drive_service.files().create(
                      body=file_metadata,
                      media_body=media,
                      fields='id'
                  ).execute()
                  print(f'Uploaded PR Preview: {file_name}')

          def upload_directory(local_path, parent_folder_id, drive_service, exclude_dirs=None):
              if exclude_dirs is None:
                  exclude_dirs = ['.git', '.github', 'node_modules', '__pycache__']
              
              for root, dirs, files in os.walk(local_path):
                  dirs[:] = [d for d in dirs if d not in exclude_dirs]
                  
                  for file in files:
                      file_path = os.path.join(root, file)
                      try:
                          upload_file(file_path, parent_folder_id, drive_service)
                      except Exception as e:
                          print(f'Error uploading {file_path}: {e}')

          print("Starting PR preview upload to Google Drive...")
          upload_directory('.', FOLDER_ID, service)

          if os.path.exists('pdf_output'):
              print("Uploading converted PDF files...")
              upload_directory('pdf_output', FOLDER_ID, service)

          print("PR preview upload completed!")
          EOF
          
          python upload_to_drive.py