name: Sync to Hugging Face hub and Google Drive
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  sync-to-hub-and-drive:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      # Ensure Git LFS is installed and fetch binary files
      - name: Pull LFS files
        run: |
          git lfs install
          git lfs pull

      # Install pandoc and fonts for proper Unicode/emoji support
      - name: Install pandoc and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            fonts-dejavu \
            fonts-liberation \
            python3-pip
          
          # Install weasyprint as fallback
          pip install weasyprint

      # Convert MD files to PDF
      - name: Convert MD to PDF
        run: |
          find . -name "*.md" -not -path "./.git/*" | while read file; do
            # Get the directory and filename
            dir="$(dirname "$file")"
            filename="$(basename "$file" .md)"
            pdf_path="$dir/$filename.pdf"
            
            echo "Converting $file to $pdf_path"
            
            # Convert MD to PDF with proper Unicode support and image handling
            pandoc "$file" \
              -o "$pdf_path" \
              --pdf-engine=xelatex \
              --variable mainfont="DejaVu Sans" \
              --variable sansfont="DejaVu Sans" \
              --variable monofont="DejaVu Sans Mono" \
              --include-in-header=<(echo '\usepackage{graphicx}') \
              --include-in-header=<(echo '\usepackage{float}') \
              --include-in-header=<(echo '\floatplacement{figure}{H}') \
              --resource-path="$dir" \
              --standalone \
              --toc \
              --number-sections \
              --highlight-style=github \
              -V geometry:margin=1in \
              -V colorlinks=true \
              -V linkcolor=blue \
              -V urlcolor=blue \
              -V toccolor=gray \
              --wrap=auto \
              --dpi=300 \
              --verbose || {
                echo "Error converting $file with xelatex, trying with weasyprint..."
                # Fallback to HTML->PDF conversion for complex documents
                pandoc "$file" \
                  -t html5 \
                  --standalone \
                  --self-contained \
                  --css=<(echo 'body{font-family:Arial,sans-serif;max-width:800px;margin:0 auto;padding:20px;line-height:1.6}img{max-width:100%;height:auto}pre{background:#f5f5f5;padding:10px;border-radius:5px;overflow-x:auto}') \
                  -o "$dir/$filename.html"
                
                # Install weasyprint for HTML to PDF conversion
                pip install weasyprint
                weasyprint "$dir/$filename.html" "$pdf_path" || {
                  echo "Both conversions failed for $file, skipping..."
                  continue
                }
                rm -f "$dir/$filename.html"
              }
            
            if [ -f "$pdf_path" ]; then
              echo "Successfully converted $file to $pdf_path"
            else
              echo "Failed to convert $file"
            fi
          done

      # Set up Python for Google Drive upload
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      # Create Google Drive upload script
      - name: Create upload script
        run: |
          cat > upload_to_drive.py << 'EOF'
          import os
          import json
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          import mimetypes

          # Load credentials from environment
          credentials_json = os.environ['GOOGLE_CREDENTIALS']
          credentials_info = json.loads(credentials_json)
          credentials = service_account.Credentials.from_service_account_info(credentials_info)

          # Build the Drive service
          service = build('drive', 'v3', credentials=credentials)

          # Target folder ID
          FOLDER_ID = '1-8HJcWxsUUQIj9OMXQeoeULS06RA9Hg9'

          def get_mime_type(file_path):
              mime_type, _ = mimetypes.guess_type(file_path)
              return mime_type or 'application/octet-stream'

          def upload_file(file_path, parent_folder_id, drive_service):
              file_name = os.path.basename(file_path)
              
              # Check if file already exists
              query = f"name='{file_name}' and '{parent_folder_id}' in parents and trashed=false"
              results = drive_service.files().list(q=query).execute()
              items = results.get('files', [])
              
              media = MediaFileUpload(file_path, mimetype=get_mime_type(file_path), resumable=True)
              
              if items:
                  # Update existing file
                  file_id = items[0]['id']
                  updated_file = drive_service.files().update(
                      fileId=file_id,
                      media_body=media
                  ).execute()
                  print(f'Updated: {file_name} (ID: {updated_file.get("id")})')
              else:
                  # Create new file
                  file_metadata = {
                      'name': file_name,
                      'parents': [parent_folder_id]
                  }
                  file = drive_service.files().create(
                      body=file_metadata,
                      media_body=media,
                      fields='id'
                  ).execute()
                  print(f'Uploaded: {file_name} (ID: {file.get("id")})')

          def upload_directory(local_path, parent_folder_id, drive_service, exclude_dirs=None, exclude_files=None):
              if exclude_dirs is None:
                  exclude_dirs = ['.git', '.github', 'node_modules', '__pycache__']
              if exclude_files is None:
                  exclude_files = ['*.md']  # Skip markdown files
              
              import fnmatch
              
              for root, dirs, files in os.walk(local_path):
                  # Remove excluded directories
                  dirs[:] = [d for d in dirs if d not in exclude_dirs]
                  
                  for file in files:
                      # Skip excluded file patterns (like *.md)
                      should_skip = False
                      for pattern in exclude_files:
                          if fnmatch.fnmatch(file, pattern):
                              should_skip = True
                              break
                      
                      if should_skip:
                          print(f'Skipping {file} (excluded file type)')
                          continue
                          
                      file_path = os.path.join(root, file)
                      try:
                          upload_file(file_path, parent_folder_id, drive_service)
                      except Exception as e:
                          print(f'Error uploading {file_path}: {e}')

          # Upload all files to Google Drive (excluding MD files)
          print("Starting upload to Google Drive...")
          upload_directory('.', FOLDER_ID, service)

          print("Upload completed - MD files were skipped, PDFs were uploaded!")
          EOF

      # Upload to Google Drive
      - name: Upload to Google Drive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: python upload_to_drive.py

      # Push to Hugging Face (original functionality)
      - name: Push to Hugging Face hub
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git push --force https://prathameshv07:$HF_TOKEN@huggingface.co/spaces/prathameshv07/Multilingual-Audio-Intelligence-System main